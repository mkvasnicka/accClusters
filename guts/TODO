TODO
====

Hotspoty/klastry
----------------

- vyzkoušet výpočet NKDE paralelně s neváženými nehodami a vážnými pomocí injuries
- PAI optimalizace parametrizace tvorby klastrů
- jak zahrnout čas? zatím se počítá na všech nehodách. jak to udělat? možnosti:
    - statická tabulka s rozsahy datumů, pro které se to počítá
    - nějaký automat
    - jen poslední klouzavé okno (např. 3 roky zpět od posledního data)
- otázka: optimalizovat parametry klastrů globálně (tj. PAI celku, nebo po jednotlivých klastech)?
    - pokud po klastrech, jak?


Mapy
----

Pro všechny okresy:
- zkontrolovat počet souvislých podgrafů
- spustit kontrolu, o které psal Gelb

Funkce:
- SF silnice v .rds jsou nově sfnetworks -- tomu se bude muset přizpůsobit kód, který na tom staví
- vyřešit spojování blízkých bodů v sfnetworks
    - problém:
        - buď vyhodím nahrazené cesty, ale to vyhodí i všechny smyčky v síti,
        - nebo nevyhodím smyčky, ale zůstanou tam i původní silnice
    - dělá to parametr simplify na řádku
        tidygraph::convert(sfnet, sfnetworks::to_spatial_contracted, cls, cmp,
                           simplify = FALSE)
- zrychlit hledání klastrů hotspotů na sf/sfnetworks/spNetwork
- CRS všude vytahat z funkcí do jejich interface -- tam použít konstatny
- funkce create_sf_nb() používá sf_touches() -- použít raději from -- to v lixelech?

Tvorba OSM
- osmium nechce pokračovat, když soubory .osm existují -- na začátku funkce, která je má vytvořit, je třeba je vymazat


Nehody
------

V současnosti se natahují jen soupce z tabulky nehody a z GPS se doplní souřadnice.
- doplnit ostatní sloupce, které budou potřeba
- vyhodit sloupce, které nejsou potřeba
- jak počítat závažnost nehody?
- create_districts_accidents() běží na málo jádrech, protože  vyžaduje hodně paměti -- asi kvůli kopírování velké tabulky accidents; asi by šlo zlepšit, kdyby se tabulka prvně cropem rozdělila na kusy a ty se poslaly přímo do paralelizace


Všude
-----

- počet workers vzít z get_number_of_workers()
- odstranit jména souborů z tabulky districts a všude, kde se na to odkazuje, a nahradit to funkcemi, které budou používat id z districts
- spojit všechny prepare_*.R do jednoho souboru a přidat logování
- najít všechna volání purrr a paralelizovat, co je možné
